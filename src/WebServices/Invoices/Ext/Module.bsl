#Область ПрограммныйИнтерфейс

#Область Документы

Функция CreateDocuments(Data)
	
	Возврат ЗаполнитьДокументы(Data);
	
КонецФункции

Функция UpdateDocuments(DocumentsRef, Data)
	
	Возврат ЗаполнитьДокументы(Data, DocumentsRef);
	
КонецФункции

Функция FindDocuments(SearchOptions)
	
	ArrayOfDocumentsRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "ArrayOfDocumentsRef"));
	
	Контрагент = Справочники.Контрагенты.ПолучитьСсылку(SearchOptions.CustomerID);
	Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(SearchOptions.ContractID);
	НачалоПериода = SearchOptions.DateFrom;
	КонецПериода = SearchOptions.DateTo;
	Организация = Договор.Организация;
	
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ТаблицаУслуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Для Каждого Service Из SearchOptions.Services Цикл
		НоваяСтрока = ТаблицаУслуги.Добавить();
		НоваяСтрока.Содержание = СокрЛП(Service.Name);
		НоваяСтрока.Количество = Service.Quantity;
		НоваяСтрока.Цена = Service.Price;
		НоваяСтрока.СтавкаНДС = XMLЗначение(Тип("ПеречислениеСсылка.СтавкиНДС"), Service.VATRate);
	КонецЦикла;
	
	СписокСчетов = НайтиСчета(ТаблицаУслуги, Контрагент, Договор, НачалоПериода, КонецПериода);
	
	Для Каждого Счет Из СписокСчетов Цикл
		DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
		DocumentRef.ID     = Счет.УникальныйИдентификатор();
		DocumentRef.Number = Счет.Номер; 
		DocumentRef.Date   = Счет.Дата;
		
		DocumentsRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentsRef"));
		DocumentsRef.Invoice = DocumentRef;
	
		Акт = НайтиАкт(Счет);
		Если ЗначениеЗаполнено(Акт) Тогда
			DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
			DocumentRef.ID     = Акт.УникальныйИдентификатор();
			DocumentRef.Number = Акт.Номер; 
			DocumentRef.Date   = Акт.Дата;
			
			DocumentsRef.Act = DocumentRef;
			
			СчетФактура = НайтиСчетФактуру(Акт);
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
				DocumentRef.ID     = СчетФактура.УникальныйИдентификатор();
				DocumentRef.Number = СчетФактура.Номер; 
				DocumentRef.Date   = СчетФактура.Дата;
			
				DocumentsRef.InvoiceFacture = DocumentRef
			КонецЕсли;
		КонецЕсли;
		ArrayOfDocumentsRef.Item.Добавить(DocumentsRef);
	КонецЦикла;
	
	Возврат ArrayOfDocumentsRef;
		
КонецФункции

Функция PrintDocuments(DocumentsRef, Stamp, Options)
	
	DocumentsXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Documents"));
	
	ТипыДокументов = ТипыДокументов();
	
	Для Каждого ЭлементСписка Из ТипыДокументов Цикл
		Если DocumentsRef[ЭлементСписка] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСписка = "Invoice" Тогда
			ИмяМакета = "СчетЗаказ";
			ДокументСсылка = Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(DocumentsRef[ЭлементСписка].ID);
		ИначеЕсли ЭлементСписка = "Act" Тогда
			ИмяМакета = "Акт";
			ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(DocumentsRef[ЭлементСписка].ID);
			
			УдалятьОбластьИсполнителяВАкте = Ложь;
			Для Каждого Option Из Options.Item Цикл
				Если Option.Document = "Act" И Option.Type = "OneSigner" Тогда
					УдалятьОбластьИсполнителяВАкте = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЭлементСписка = "InvoiceFacture" Тогда
			ДокументСсылка = Документы.СчетФактураВыданный.ПолучитьСсылку(DocumentsRef[ЭлементСписка].ID);
			МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка);
			ИмяМакета = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(МассивОбъектов).СписокМакетов;
		КонецЕсли;
		
		Если ЭлементСписка = "Invoice" Тогда
			МенеджерПечати = Обработки.ПечатьСчетаНаОплату;
		Иначе
			МенеджерПечати = Документы[ДокументСсылка.Метаданные().Имя];
		КонецЕсли;
		
		Таб = ПолучитьТабличныйДокумент(ДокументСсылка, ИмяМакета, МенеджерПечати);
		
		Если Stamp Тогда
			УправлениеПечатьюБП.ДобавитьФаксимилеВФоне(Таб, ДокументСсылка);
		КонецЕсли;

		// TODO: Остальные документы также нужно перевести на постобработку табличного документа
		Если ЭлементСписка = "Act" Тогда
			СтрокаПоиска = "Вышеперечисленные услуги выполнены полностью и в срок.";
			ИндексСтроки = НайтиСтрокуВТабличномДокументе(Таб, 2, СтрокаПоиска);
			
			Если УдалятьОбластьИсполнителяВАкте Тогда
				УдалитьОбластьВТабличномДокументе(Таб, ИндексСтроки + 4, 21, 4, 12);
			КонецЕсли;
		КонецЕсли;
		
		Таб.АвтоМасштаб = Истина;
		ИмяФайлаPDF = ПолучитьИмяВременногоФайла(".pdf");
		Таб.Записать(ИмяФайлаPDF, ТипФайлаТабличногоДокумента.PDF);
				
		DocumentsXDTO[ЭлементСписка] = Новый ДвоичныеДанные(ИмяФайлаPDF);
		
		Попытка
			УдалитьФайлы(ИмяФайлаPDF);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат DocumentsXDTO;
	
КонецФункции

Функция PrintReconciliationAct(Data, Stamp)
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("ДатаНачала", НачалоДня(Data.BeginPeriod));
	ПараметрыПоиска.Вставить("ДатаОкончания", КонецДня(Data.EndPeriod));
	ПараметрыПоиска.Вставить("Организации", Новый Массив);
	Для Каждого OrganizationID Из Data.OrganizationID Цикл
		ПараметрыПоиска.Организации.Добавить(Справочники.Организации.ПолучитьСсылку(OrganizationID));
	КонецЦикла;
	Если ЗначениеЗаполнено(Data.CustomerID) Тогда
		ПараметрыПоиска.Вставить("Контрагент", Справочники.Контрагенты.ПолучитьСсылку(Data.CustomerID));
	Иначе
		ПараметрыПоиска.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(Data.ContractID) И ПараметрыПоиска.Организации.Количество() = 1 Тогда
		ПараметрыПоиска.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Data.ContractID));
	Иначе
		ПараметрыПоиска.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	Свойства = Новый Массив;
	Значения = Новый Массив;
	Если ПараметрыПоиска.Организации.Количество() = 1 Тогда
		Для Каждого ContractProperty Из Data.ContractProperties Цикл
			Ключ = НайтиСвойствоПоИмени(ContractProperty.Key, "Справочник_ДоговорыКонтрагентов");
			Значение = НайтиЗначениеСвойства(Ключ, ContractProperty.Value);
			Свойства.Добавить(Ключ);
			Значения.Добавить(Значение); 
		КонецЦикла;	
	КонецЕсли;
	ПараметрыПоиска.Вставить("Свойства", Свойства);
	ПараметрыПоиска.Вставить("Значения", Значения);
	
	ПараметрыПоиска.Вставить("Дата", ?(ЗначениеЗаполнено(Data.Date), Data.Date, ТекущаяДата()));
	
	АктыСверки = НайтиАктСверки(ПараметрыПоиска);
	Если АктыСверки = Неопределено Тогда
		АктыСверки = СоздатьАктСверки(ПараметрыПоиска);
	ИначеЕсли АктыСверки.Количество() < ПараметрыПоиска.Организации.Количество() Тогда
		Для Каждого Акт Из АктыСверки Цикл
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПараметрыПоиска.Организации, Акт.Организация);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АктыСверки, СоздатьАктСверки(ПараметрыПоиска)); 
	КонецЕсли;
		
	ИмяМакета = "АктСверки";
	
	МенеджерПечати = Документы.АктСверкиВзаиморасчетов;
	Таб = Новый ТабличныйДокумент;
	Для Каждого АктСверки Из АктыСверки Цикл
		ПромежуточныйТаб = ПолучитьТабличныйДокумент(АктСверки, "АктСверки", МенеджерПечати);
		Если Stamp Тогда
			УправлениеПечатьюБП.ДобавитьФаксимилеВФоне(ПромежуточныйТаб, АктСверки);
		КонецЕсли;
		Таб.ВывестиГоризонтальныйРазделительСтраниц();
		Таб.Вывести(ПромежуточныйТаб);
	КонецЦикла;
	
	Таб.АвтоМасштаб = Истина;
	ИмяФайлаPDF = ПолучитьИмяВременногоФайла("Акт сверки взаиморасчетов.pdf");
	Таб.Записать(ИмяФайлаPDF, ТипФайлаТабличногоДокумента.PDF);
	
	Результат = Новый ДвоичныеДанные(ИмяФайлаPDF);
	
	Попытка
		УдалитьФайлы(ИмяФайлаPDF);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#Область СозданиеПрочихСчетов

Функция CreateInvoice(Data)
	
	Возврат ЗаполнитьСчетНаОплатуПокупателю(Data);
	
КонецФункции

Функция UpdateInvoice(DocumentRef, Data)
	
	Возврат ЗаполнитьСчетНаОплатуПокупателю(Data, DocumentRef);	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Контрагент

Функция CreateContractor(Contractor, DuplicationControl)
	
	ИНН = Contractor.INN;
	КПП = Contractor.KPP;
	
	НачатьТранзакцию();
	Попытка
		Если DuplicationControl = Истина Тогда
			ПроверитьКонтрагентаНаДублирование(ИНН, КПП);
		КонецЕсли;
		
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		
		ЗаполнитьКонтрагентОбъект(КонтрагентОбъект, Contractor);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.CreateContractor'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат КонтрагентОбъект.Ссылка.УникальныйИдентификатор();
	
КонецФункции

Функция GetContractor(ContractorID)
	
	Попытка
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(ContractorID);
		Если Контрагент.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Контрагент с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ContractorID));
		КонецЕсли;
		
		ДанныеКонтрагента = ПолучитьДанныеКонтрагента(Контрагент);
		
		Contractor = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Contractor"));
		ЗаполнитьЗначенияСвойств(Contractor, ДанныеКонтрагента,, "Contact,Account,ActualAddress,LegalAddress,PostalAddress");
		
		Address = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Address"));
		Address.Presentation = ДанныеКонтрагента.ActualAddress;
		Contractor.ActualAddress = Address;
		
		Address = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Address"));
		Address.Presentation = ДанныеКонтрагента.LegalAddress;
		Contractor.LegalAddress = Address;
		
		Address = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Address"));
		Address.Presentation = ДанныеКонтрагента.PostalAddress;
		Contractor.PostalAddress = Address;
		
		AccountCollection = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "AccountCollection"));
		Для Каждого Элемент Из ДанныеКонтрагента.Account Цикл
			Account = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Account"));
			ЗаполнитьЗначенияСвойств(Account, Элемент);
			AccountCollection.Item.Добавить(Account);
		КонецЦикла;
		Contractor.Account = AccountCollection;
		
		ContactCollection = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "ContactCollection"));
		Для Каждого Элемент Из ДанныеКонтрагента.Contact Цикл
			Contact = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Contact"));
			ЗаполнитьЗначенияСвойств(Contact, Элемент);
			ContactCollection.Item.Добавить(Contact);
		КонецЦикла;
		Contractor.Contact = ContactCollection;
		
		Возврат Contractor; 
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.GetContractor'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция UpdateContractor(Contractor, DuplicationControl)
	
	ИНН = Contractor.INN;
	КПП = Contractor.KPP;
	
	НачатьТранзакцию();
	Попытка
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Contractor.ID);
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		Если КонтрагентОбъект = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Контрагент с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Contractor.ID));
		КонецЕсли;
		
		Если DuplicationControl = Истина Тогда
			СтарыйИНН = Контрагент.ИНН;
			СтарыйКПП = Контрагент.КПП;
			
			Если ИНН <> СтарыйИНН ИЛИ КПП <> СтарыйКПП Тогда
				ПроверитьКонтрагентаНаДублирование(ИНН, КПП);
			КонецЕсли;
		КонецЕсли;

		
		ЗаполнитьКонтрагентОбъект(КонтрагентОбъект, Contractor);
				
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.CreateContractor'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция RemoveContractor(ContractorID, SetDeletionMark)
	
	Попытка
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(ContractorID);
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		Если КонтрагентОбъект = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Контрагент с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ContractorID));
		КонецЕсли;
		
		Если SetDeletionMark Тогда
			КонтрагентОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			// TODO: Обеспечить контроль ссылочной целостности
			КонтрагентОбъект.Удалить();
		КонецЕсли;
		
		Возврат Истина; 
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.RemoveContractor'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция FindContractor(INN, KPP)
	
	Попытка
		ContractorCollection = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "ContractorCollection"));
		
		МассивКонтрагентов = ПолучитьКонтрагентовПоИНН(INN, KPP);
		
		Для Каждого Контрагент Из МассивКонтрагентов Цикл
			ContractorCollection.Item.Добавить(GetContractor(Контрагент.УникальныйИдентификатор()));	
		КонецЦикла; 
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.FindContractor'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ContractorCollection;
	
КонецФункции

#КонецОбласти

#Область ДоговорКонтрагента

Функция CreateContract(Contract)
	
	НачатьТранзакцию();
	Попытка
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Contract.ContractorID);
		Если Контрагент.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Контрагент с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Contract.ContractorID));
		КонецЕсли;
		
		Организация = Справочники.Организации.ПолучитьСсылку(Contract.OrganizationID);
		Если Контрагент.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Организация с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Contract.OrganizationID));
		КонецЕсли;
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Владелец = Контрагент;
		ДоговорОбъект.Организация = Организация;
		ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		
		ЗаполнитьДоговорОбъект(ДоговорОбъект, Contract);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.CreateContract'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДоговорОбъект.Ссылка.УникальныйИдентификатор();	
	
КонецФункции

Функция GetContract(ContractID)
	
	Попытка
		Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(ContractID);
		Если Договор.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Договор с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ContractID));
		КонецЕсли;
		
		ДанныеДоговора = ПолучитьДанныеДоговора(Договор);
		Если ЗначениеЗаполнено(ДанныеДоговора) Тогда
			Contract = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Contract"));
			ЗаполнитьЗначенияСвойств(Contract, ДанныеДоговора,, "Properties");
			
			Для Каждого Свойство Из ДанныеДоговора.Properties Цикл
				Property = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Property"));			
				ЗаполнитьЗначенияСвойств(Property, Свойство);
				Contract.Properties.Добавить(Property);	
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.GetContract'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Contract;
	
КонецФункции

Функция UpdateContract(Contract)
		
	НачатьТранзакцию();
	Попытка
		Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Contract.ID);
		Если Договор.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Договор с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Contract.ID));
		КонецЕсли;
		
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Contract.ContractorID);
		Если Контрагент.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Контрагент с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Contract.ContractorID));
		КонецЕсли;
		
		Организация = Справочники.Организации.ПолучитьСсылку(Contract.OrganizationID);
		Если Контрагент.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Организация с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Contract.OrganizationID));
		КонецЕсли;
		
		ДоговорОбъект = Договор.ПолучитьОбъект();
		ДоговорОбъект.Владелец = Контрагент;
		ДоговорОбъект.Организация = Организация;
		
		ЗаполнитьДоговорОбъект(ДоговорОбъект, Contract);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.UpdateContract'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция RemoveContract(ContractID, SetDeletionMark)
	
	Попытка
		Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(ContractID);
		ДоговорОбъект = Договор.ПолучитьОбъект();
		Если ДоговорОбъект = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Договор с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ContractID));
		КонецЕсли;
		
		Если SetDeletionMark Тогда
			ДоговорОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			// TODO: Обеспечить контроль ссылочной целостности
			ДоговорОбъект.Удалить();
		КонецЕсли;
		
		Возврат Истина; 
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.RemoveContract'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция FindContract(ContractorID)
	
	Попытка
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(ContractorID);
		Если Контрагент.ПолучитьОбъект() = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Контрагент с идентификатором %1 не существует.'");
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ContractorID));
		КонецЕсли;
		
		ContractCollection = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "ContractCollection"));
		
		МассивДоговоров = ПолучитьДоговораКонтрагента(Контрагент);
		
		Для Каждого Договор Из МассивДоговоров Цикл
			ContractCollection.Item.Добавить(GetContract(Договор.УникальныйИдентификатор()));	
		КонецЦикла; 
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Invoices.FindContract'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ContractCollection;
	
КонецФункции

#КонецОбласти

#Область Сверка

Функция GetDataReconciliation(BeginPeriod, EndPeriod)
	
	ДанныеСверки = ПолучитьДанныеСверки(BeginPeriod, EndPeriod);
	
	ReconciliationCollection = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "ReconciliationCollection"));
	Для Каждого СтрокаТаблицы Из ДанныеСверки Цикл
		Reconciliation = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Reconciliation"));
		ЗаполнитьЗначенияСвойств(Reconciliation, СтрокаТаблицы,, "ContractorID,ContractID,Payd,Accrued");
		
		ReconciliationCollection.Item.Добавить(Reconciliation);
	КонецЦикла;
	
	Возврат ReconciliationCollection;
	
КонецФункции

#КонецОбласти

#Область ПлатежиПоСчетам

Функция GetInvoicePayment(BeginPeriod, EndPeriod)
	
	ПлатежиПоСчетам = ПолучитьПлатежиПоСчетам(BeginPeriod, EndPeriod);
	
	InvoicePaymentCollection = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "InvoicePaymentCollection"));
	
	Для Каждого СтрокаТаблицы Из ПлатежиПоСчетам Цикл
		InvoicePayment = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "InvoicePayment"));
		
		DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
		DocumentRef.ID = СтрокаТаблицы.Счет.УникальныйИдентификатор();
		DocumentRef.Number = СтрокаТаблицы.Номер;
		DocumentRef.Date = СтрокаТаблицы.Дата;
		
		InvoicePayment.Amount = СтрокаТаблицы.Сумма;
		InvoicePayment.Invoice = DocumentRef;
		InvoicePayment.Customer = СтрокаТаблицы.КонтрагентНаименование;
		InvoicePayment.CustomerID = СтрокаТаблицы.Контрагент.УникальныйИдентификатор();
		InvoicePayment.ContractID = СтрокаТаблицы.Договор.УникальныйИдентификатор();
		InvoicePayment.Payment = СтрокаТаблицы.Оплачено;
		
		Для Каждого Услуга Из СтрокаТаблицы.Услуги Цикл
			Service = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "Service"));
			Service.ID = Услуга.Номенклатура.УникальныйИдентификатор();
			Service.Name = Услуга.Содержание;
			Service.Quantity = Услуга.Количество;
			Service.Price = Услуга.Сумма;
			Service.VATRate = XMLСтрока(Услуга.СтавкаНДС);
			InvoicePayment.Services.Добавить(Service);
		КонецЦикла;		
		
		Для Каждого АктИСчетаФактура Из СтрокаТаблицы.АктИСчетФактура Цикл
			ActAndInvoiceFacture = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "ActAndInvoiceFacture"));
			
			DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
			DocumentRef.ID = АктИСчетаФактура.Акт.УникальныйИдентификатор();
			ActAndInvoiceFacture.Act = DocumentRef;
			
			Если ЗначениеЗаполнено(АктИСчетаФактура.СчетФактура) Тогда
				DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
				DocumentRef.ID = АктИСчетаФактура.СчетФактура.УникальныйИдентификатор();
				ActAndInvoiceFacture.InvoiceFacture = DocumentRef;
			КонецЕсли;
			
			InvoicePayment.ActAndInvoiceFacture.Добавить(ActAndInvoiceFacture);
		КонецЦикла;
		
		InvoicePaymentCollection.Item.Добавить(InvoicePayment);
	КонецЦикла;

	Возврат InvoicePaymentCollection;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСтрокуВТабличномДокументе(ТабДокумент, Колонка, СтрокаПоиска)
	
	Индекс = ТабДокумент.ВысотаТаблицы;
	
	Пока Индекс > 0 Цикл
		Если СтрНайти(СокрЛП(ТабДокумент.Область(Индекс, Колонка, Индекс, Колонка).Текст), СтрокаПоиска) Тогда
			Возврат Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Процедура УдалитьОбластьВТабличномДокументе(ТабДокумент, Строка, Колонка, ВсегоСтрок, ВсегоКолонок)
	
	ТабДокумент.УдалитьОбласть(ТабДокумент.Область(Строка, Колонка, Строка + ВсегоСтрок, Колонка + ВсегоКолонок), ТипСмещенияТабличногоДокумента.БезСмещения);
	
КонецПроцедуры

Процедура ВывестиКартинкуВТабличныйДокумент(ТабДокумент, Строка, Колонка, ВсегоСтрок, ВсегоКолонок, Ширина, Высота, Картинка)
	
	Рисунок = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Расположить(ТабДокумент.Область(Строка, Колонка, Строка + ВсегоСтрок, Колонка + ВсегоКолонок));
	Рисунок.Картинка = Новый Картинка(Картинка, Истина);
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	Рисунок.ЦветФона = Новый Цвет;
	Рисунок.Ширина = Ширина;
	Рисунок.Высота = Высота;
	
КонецПроцедуры

Функция ПространствоИмен()
	
	Возврат "http://gettable.ru/invoice";
	
КонецФункции

#Область Документы

Функция ПолучитьТабличныйДокумент(Ссылка, ИмяМакета, МенеджерПечати)
	
	Если ТипЗнч(Ссылка) = Тип("Массив") Тогда
		МассивОбъектов = Ссылка;
	Иначе
		МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	КонецЕсли;
	
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяВРЕГ");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	КоллекцияПечатныхФорм.Колонки.Добавить("Картинка");
	КоллекцияПечатныхФорм.Колонки.Добавить("ПолныйПутьКМакету");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("Экземпляров");
	
	НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
	НоваяСтрока.ИмяМакета = ИмяМакета;
	НоваяСтрока.ИмяВРЕГ = ВРег(НоваяСтрока.ИмяМакета);	


	НоваяСтрока.Экземпляров = 1;
	
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", СтрСоединить(МассивОбъектов, ", "));
	ОбъектыПечати = Новый СписокЗначений;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно");
	ПараметрыВывода.Вставить("ПараметрыОтправки", Новый Структура("Получатель,Текст,Тема"));
	
	
	МенеджерПечати.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
	
КонецФункции

Функция НайтиСчета(ТаблицаУслуги, Контрагент, Договор, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Контрагент = &Контрагент
	|	И СчетНаОплатуПокупателю.ДоговорКонтрагента = &Договор
	|	И СчетНаОплатуПокупателю.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	//Запрос.УстановитьПараметр("ТаблицаУслуги", ТаблицаУслуги);
	//Запрос.УстановитьПараметр("КоличествоСтрок", ТаблицаУслуги.Количество());
	
	СписокСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокСчетов;
	
КонецФункции

Функция НайтиАкт(Счет)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю = &Счет";
	Запрос.УстановитьПараметр("Счет", Счет);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
КонецФункции

Функция НайтиСчетФактуру(Акт)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &Акт";
	Запрос.УстановитьПараметр("Акт", Акт);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ДокументОбъект = Документы.СчетФактураВыданный.СоздатьДокумент();
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
КонецФункции

Функция НайтиАктСверки(ПараметрыПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(АктСверкиВзаиморасчетов.Ссылка) КАК Ссылка,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|ГДЕ
	|	(НЕ &КонтрагентУказан
	|			ИЛИ АктСверкиВзаиморасчетов.Контрагент = &Контрагент)
	|	И (НЕ &ДоговорУказан
	|			ИЛИ АктСверкиВзаиморасчетов.ДоговорКонтрагента = &ДоговорКонтрагента)
	|	И АктСверкиВзаиморасчетов.ДатаНачала = &ДатаНачала
	|	И АктСверкиВзаиморасчетов.ДатаОкончания = &ДатаОкончания
	|	И НЕ АктСверкиВзаиморасчетов.ПометкаУдаления
	|	И АктСверкиВзаиморасчетов.Организация В(&Организация)
	|	И (НЕ &СвойстваУказаны
	|			ИЛИ АктСверкиВзаиморасчетов.ДоговорКонтрагента.ДополнительныеРеквизиты.Свойство В (&Свойство))
	|	И (НЕ &СвойстваУказаны
	|			ИЛИ АктСверкиВзаиморасчетов.ДоговорКонтрагента.ДополнительныеРеквизиты.Значение В (&Значение))
	|
	|СГРУППИРОВАТЬ ПО
	|	АктСверкиВзаиморасчетов.Организация";

	
	Запрос.УстановитьПараметр("Организация", ПараметрыПоиска.Организации);
	Запрос.УстановитьПараметр("ДоговорУказан", ЗначениеЗаполнено(ПараметрыПоиска.ДоговорКонтрагента));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыПоиска.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("КонтрагентУказан", ЗначениеЗаполнено(ПараметрыПоиска.Контрагент));
	Запрос.УстановитьПараметр("Контрагент", ПараметрыПоиска.Контрагент);
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыПоиска.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ПараметрыПоиска.ДатаОкончания));
	
	Запрос.УстановитьПараметр("СвойстваУказаны", ЗначениеЗаполнено(ПараметрыПоиска.Свойства));
	Запрос.УстановитьПараметр("Свойство", ПараметрыПоиска.Свойства);
	Запрос.УстановитьПараметр("Значение", ПараметрыПоиска.Значения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

Функция ТипыДокументов()
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить("Invoice");
	ТипыДокументов.Добавить("Act");
	ТипыДокументов.Добавить("InvoiceFacture");
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ПолучитьОбъектСчетНаОплату(Ссылка = Неопределено)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъектАкт(Ссылка = Неопределено)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъектСчетФактура(Ссылка = Неопределено, Акт = Неопределено)
	
	//Если ЗначениеЗаполнено(Акт) Тогда
	//	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Акт);
	//	Если ЗначениеЗаполнено(СчетФактура) Тогда
	//		Возврат СчетФактура.ПолучитьОбъект();
	//	КонецЕсли;
	//КонецЕсли;
	//
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			ПолученныйОбъект = Ссылка.ПолучитьОбъект();
			Возврат ПолученныйОбъект;
		Иначе
			ВызватьИсключение(СтрШаблон("Объект с идентификатором %1 не найден", Ссылка.УникальныйИдентификатор()));
		КонецЕсли;
	Иначе
		Возврат Документы.СчетФактураВыданный.СоздатьДокумент();
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСчетНаОплату(СчетОбъект, ТаблицаУслуги, Организация, Контрагент, Договор, ВключаетНДС, Дата)
	
	Счет = Новый Структура("Ссылка,Номер,Дата");
	
	// Заполнение документа
	СчетОбъект.Организация = Организация;
	ЗаполнениеДокументов.Заполнить(СчетОбъект);
	
	Если ЗначениеЗаполнено(СчетОбъект.СтруктурнаяЕдиница) Тогда
		СчетОбъект.ОрганизацияПолучатель = СчетОбъект.СтруктурнаяЕдиница.Владелец;
	Иначе
		СчетОбъект.ОрганизацияПолучатель = СчетОбъект.Организация;
	КонецЕсли;
	
	СчетОбъект.Контрагент = Контрагент;
	СчетОбъект.ДоговорКонтрагента = Договор;
	СчетОбъект.Дата = Дата;
	СчетОбъект.СуммаВключаетНДС = ВключаетНДС;
	
	СчетОбъект.Товары.Очистить();
	СписокНоменклатуры = Новый Массив;

	Для Каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
		НоваяСтрока = СчетОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			СписокНоменклатуры.Добавить(Строка(НоваяСтрока.Номенклатура));
		Иначе
			СписокНоменклатуры.Добавить(СокрЛП(НоваяСтрока.Содержание));
		КонецЕсли;
		
		// Рассчитываем реквизиты табличной части.
		//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока, 1);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ВключаетНДС);
	КонецЦикла;
	Комментарий = СтрСоединить(СписокНоменклатуры, "; ");	
	СчетОбъект.Комментарий = Комментарий;
	
	СчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	СрокОплаты = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(СчетОбъект.Дата);
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчетОбъект.Ссылка, СрокОплаты);
	
	Счет.Ссылка = СчетОбъект.Ссылка;
	Счет.Номер = СчетОбъект.Номер;
	Счет.Дата = СчетОбъект.Дата;
	
	Возврат Счет;
	
КонецФункции

Функция ЗаполнитьАкт(АктОбъект, Счет, Дата)
	
	Акт = Новый Структура("Ссылка,Номер,Дата");
	
	// Заполнение документа
	АктОбъект.АгентскиеУслуги.Очистить();
	АктОбъект.Услуги.Очистить();
	
	АктОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	АктОбъект.Заполнить(Счет);
	АктОбъект.Дата = Дата;
	
	НоменклатураВозмещениеКешбека = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("d64c1ab9-cae0-11e8-80cd-0cc47a849ef9"));
	КонтрагентТинькофф = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("b39023b7-3cce-11e8-80ca-0cc47a849ef9"));
	ДоговорВозмещениеКешбека = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор("fb895fd6-cadf-11e8-80cd-0cc47a849ef9"));
	Счет76_06 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.06");
	Счет76_09 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.09");
		
	Для Каждого СтрокаТаблицы Из АктОбъект.Услуги Цикл
		Если СтрокаТаблицы.Номенклатура = НоменклатураВозмещениеКешбека Тогда
			НоваяСтрока = АктОбъект.АгентскиеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СчетРасчетов = Счет76_09;
			НоваяСтрока.Контрагент = КонтрагентТинькофф;
			НоваяСтрока.ДоговорКонтрагента = ДоговорВозмещениеКешбека;
			
			АктОбъект.СчетУчетаРасчетовСКонтрагентом = Счет76_06;
			АктОбъект.СчетУчетаРасчетовПоАвансам = Счет76_06;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТаблицы.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			СтрокаТаблицы.Субконто = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЦикла;
	
	Если АктОбъект.АгентскиеУслуги.Количество() Тогда
		АктОбъект.Услуги.Очистить();
	КонецЕсли;
	
	
	АктОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Акт.Ссылка = АктОбъект.Ссылка;
	Акт.Номер = АктОбъект.Номер;
	Акт.Дата = АктОбъект.Дата;
	
	Возврат Акт;
	
КонецФункции

Функция ЗаполнитьСчетФактуру(СчетФактураОбъект, Акт, Дата, ЭтоОбновление)
	
	СчетФактура = Новый Структура("Ссылка,Номер,Дата");
	
	Если Не ЭтоОбновление Тогда //И СчетФактураОбъект.ЭтоНовый() Тогда
		// Заполенние документа
		СчетФактураОбъект.Заполнить(Акт);
		СчетФактураОбъект.Дата = Дата;
		СчетФактураОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	СчетФактура.Ссылка = СчетФактураОбъект.Ссылка;
	СчетФактура.Номер = СчетФактураОбъект.Номер;
	СчетФактура.Дата = СчетФактураОбъект.Дата;
	
	Возврат СчетФактура;
	
КонецФункции

Функция ЗаполнитьДокументы(Data, DocumentsRef = Неопределено)
	
	ЭтоОбновление = DocumentsRef <> Неопределено;
    	
	Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Data.CustomerID);
	Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Data.ContractID);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Контрагент) Тогда
		ВызватьИсключение(СтрШаблон("Контрагент с идентификатором %1 не найден", Data.CustomerID));
	КонецЕсли;
	Если Не ОбщегоНазначения.СсылкаСуществует(Договор) Тогда
		ВызватьИсключение(СтрШаблон("Договор с идентификатором %1 не найден", Data.ContractID));
	КонецЕсли;
	Если Договор.Владелец <> Контрагент Тогда
		ВызватьИсключение(СтрШаблон("Договор ""%1"" (контрагент - %2, идентификатор - %3) не соответствует контрагенту ""%4"" (идентификатор - %5)", 
			Договор, Договор.Владелец, Data.ContractID, Контрагент, Data.CustomerID));	
	КонецЕсли;
	
	СоздаватьСчетФактуру = ТипЗнч(Data.DateInvoiceFacture) = Тип("Дата") И ЗначениеЗаполнено(Data.DateInvoiceFacture);
	
	
	Организация = Договор.Организация;
	
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ТаблицаУслуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаУслуги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУслуги.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	
	Для Каждого СтрокаТаблицы Из Data.Services Цикл
		НоваяСтрока = ТаблицаУслуги.Добавить();
		НоваяСтрока.Содержание           = СокрЛП(СтрокаТаблицы.Name);
		НоваяСтрока.Количество           = СтрокаТаблицы.Quantity;
		НоваяСтрока.Сумма                 = СтрокаТаблицы.Price;
		НоваяСтрока.Цена                 = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС            = XMLЗначение(Тип("ПеречислениеСсылка.СтавкиНДС"), СтрокаТаблицы.VATRate);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.ID));
		КонецЕсли;
	КонецЦикла;
	
	Если DocumentsRef = Неопределено Тогда
		СчетОбъект = ПолучитьОбъектСчетНаОплату();
		АктОбъект = ПолучитьОбъектАкт();
		Если СоздаватьСчетФактуру Тогда
			СчетФактураОбъект = ПолучитьОбъектСчетФактура();
		КонецЕсли;
	Иначе
		СчетОбъект = ПолучитьОбъектСчетНаОплату(Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(DocumentsRef.Invoice.ID));
		АктОбъект = ПолучитьОбъектАкт(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(DocumentsRef.Act.ID));
		
		ЗаблокироватьДанныеДляРедактирования(СчетОбъект.Ссылка);
		ЗаблокироватьДанныеДляРедактирования(АктОбъект.Ссылка);
		
		Если СоздаватьСчетФактуру Тогда
			СчетФактураОбъект = ПолучитьОбъектСчетФактура(Документы.СчетФактураВыданный.ПолучитьСсылку(DocumentsRef.InvoiceFacture.ID), АктОбъект.Ссылка);
			ЗаблокироватьДанныеДляРедактирования(СчетФактураОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Счет = ЗаполнитьСчетНаОплату(СчетОбъект, ТаблицаУслуги, Организация, Контрагент, Договор, Data.IncludesVAT, Data.DateInvoice);
	
	DocumentsRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentsRef"));
	
	DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
	DocumentRef.ID     = Счет.Ссылка.УникальныйИдентификатор();
	DocumentRef.Number = СокрЛП(Счет.Номер);
	DocumentRef.Date   = Счет.Дата;
	DocumentsRef.Invoice = DocumentRef;
	
	Акт = ЗаполнитьАкт(АктОбъект, Счет.Ссылка, Data.DateAct);
	
	DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
	DocumentRef.ID     = Акт.Ссылка.УникальныйИдентификатор();
	DocumentRef.Number = СокрЛП(Акт.Номер);
	DocumentRef.Date   = Акт.Дата;
	DocumentsRef.Act = DocumentRef;
	
	Если СоздаватьСчетФактуру Тогда
		СчетФактура = ЗаполнитьСчетФактуру(СчетФактураОбъект, Акт.Ссылка, Data.DateInvoiceFacture, ЭтоОбновление);
		
		DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
		DocumentRef.ID     = СчетФактура.Ссылка.УникальныйИдентификатор();
		DocumentRef.Number = СокрЛП(СчетФактура.Номер);
		DocumentRef.Date   = СчетФактура.Дата;
		
		DocumentsRef.InvoiceFacture = DocumentRef;
	КонецЕсли;
	
	Возврат DocumentsRef;
	
КонецФункции

Функция ЗаполнитьСчетНаОплатуПокупателю(Data, DocumentRef = Неопределено)
		
	Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Data.CustomerID);
	Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Data.ContractID);
	Организация = Договор.Организация;
	
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ТаблицаУслуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаУслуги.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаУслуги.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаУслуги.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	
	Для Каждого СтрокаТаблицы Из Data.Services Цикл
		НоваяСтрока = ТаблицаУслуги.Добавить();
		НоваяСтрока.Содержание           = СокрЛП(СтрокаТаблицы.Name);
		НоваяСтрока.Количество           = СтрокаТаблицы.Quantity;
		НоваяСтрока.Сумма                 = СтрокаТаблицы.Price;
		НоваяСтрока.Цена                 = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС            = XMLЗначение(Тип("ПеречислениеСсылка.СтавкиНДС"), СтрокаТаблицы.VATRate);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ID) Тогда
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.ID));
		КонецЕсли;
	КонецЦикла;
	
	Если DocumentRef = Неопределено Тогда
		СчетОбъект = ПолучитьОбъектСчетНаОплату();
	Иначе
		СчетОбъект = ПолучитьОбъектСчетНаОплату(Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(DocumentRef.ID));
		ЗаблокироватьДанныеДляРедактирования(СчетОбъект.Ссылка);
	КонецЕсли;
	
	Счет = ЗаполнитьСчетНаОплату(СчетОбъект, ТаблицаУслуги, Организация, Контрагент, Договор, Data.IncludesVAT, Data.DateInvoice);
		
	DocumentRef = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен(), "DocumentRef"));
	DocumentRef.ID     = Счет.Ссылка.УникальныйИдентификатор();
	DocumentRef.Number = СокрЛП(Счет.Номер);
	DocumentRef.Date   = Счет.Дата;
	
	Возврат DocumentRef;
	
КонецФункции

Функция СоздатьАктСверки(ПараметрыЗаполнения)
	
	АктыСверки = Новый Массив;
	Для Каждого Организация Из ПараметрыЗаполнения.Организации Цикл
		АктСверкиОбъект = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
		АктСверкиОбъект.Дата = ПараметрыЗаполнения.Дата;
		АктСверкиОбъект.Организация = Организация;
		
		ЗаполнениеДокументов.Заполнить(АктСверкиОбъект);
		
		ЗаполнитьЗначенияСвойств(АктСверкиОбъект, ПараметрыЗаполнения);
		
		СчетаПоУмолчанию = Новый Массив;
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
		СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
		
		АктСверкиОбъект.СписокСчетов.Очистить();
		Для Каждого Элемент Из СчетаПоУмолчанию Цикл
			НоваяСтрока = АктСверкиОбъект.СписокСчетов.Добавить();
			НоваяСтрока.Счет = Элемент;
			НоваяСтрока.УчаствуетВРасчетах = Истина;
		КонецЦикла;
		ЗаполнитьПоДаннымБухгалтерскогоУчета(АктСверкиОбъект);
		АктСверкиОбъект.Комментарий = "#Сформирован автоматически # " + ТекущаяДата();
		
		ОстатокНаКонец = АктСверкиОбъект.ОстатокНаНачало + АктСверкиОбъект.ПоДаннымОрганизации.Итог("Дебет") - АктСверкиОбъект.ПоДаннымОрганизации.Итог("Кредит");
		
		ОстатокНаКонецКонтрагент = - АктСверкиОбъект.ОстатокНаНачало + АктСверкиОбъект.ПоДаннымКонтрагента.Итог("Дебет") - АктСверкиОбъект.ПоДаннымКонтрагента.Итог("Кредит");
		
		РасчетноеРасхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
		
		Если АктСверкиОбъект.Расхождение <> РасчетноеРасхождение Тогда
			АктСверкиОбъект.Расхождение = РасчетноеРасхождение;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(АктСверкиОбъект.Контрагент) Тогда
			АктСверкиОбъект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктСверкиОбъект.Контрагент, "ОсновноеКонтактноеЛицо");
		КонецЕсли;
		Если ЗначениеЗаполнено(АктСверкиОбъект.Организация) Тогда
			АктСверкиОбъект.ПредставительОрганизации = Документы.АктСверкиВзаиморасчетов.ПредставительОрганизации(АктСверкиОбъект.Организация, АктСверкиОбъект.Дата);
		КонецЕсли;
		
		АктСверкиОбъект.Записать();
		
		АктыСверки.Добавить(АктСверкиОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат АктыСверки;
	
КонецФункции

Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(Объект)
	
	ФильтрСписокСчетов = Новый Массив();
	Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
		Новый Граница (Объект.ДатаНачала, ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, 
		Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",    Объект.Контрагент);
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		ИЛИ (Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить()), Неопределено, 
		Объект.ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, 
		Объект.ДоговорКонтрагента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ДоговораКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ(&ДоговорКонтрагента)
	|	И &ДоговорКонтрагента <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ХозрасчетныйОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = Объект.ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	КэшМетаданных = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;

		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		НоваяСтрока.Договор            = Выборка.Договор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;

		Если Объект.ВыводитьПолныеНазванияДокументов Тогда
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + " №" + Символы.НПП + Выборка.Номер;
			Иначе
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + " (" + 
					?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента), "_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '",
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли;	
		Иначе
			
			// Сформируем строку представления
			Представление = "";
			
			Если СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
					
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
					Представление = "Курсовые разницы";
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
					Представление = "Санкции";
				ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
					Представление = "Суммовые разницы";
				ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ Тогда
					Представление = "Курсовые разницы по расчетам в у.е.";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Представление) Тогда
				// Строка уже отработана
				
			ИначеЕсли СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
				ИЛИ СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
				
				Если Выборка.Дебет > 0 Тогда
					Представление = "Возврат займа";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Займ";
				Иначе
					Представление = "Операции по займам";
				КонецЕсли;
				
			ИначеЕсли СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
				ИЛИ СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
				ИЛИ СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) Тогда
				
				Представление = "Претензия";
				
			ИначеЕсли СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Касса) 
				ИЛИ СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
				ИЛИ СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
				ИЛИ СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
				
				Если (Выборка.Кредит >0) Тогда
					
					Если СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
						Представление = "Возврат средств";
						
					ИначеЕсли СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Оплата";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
					
				ИначеЕсли (Выборка.Дебет >0) Тогда
					Если СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
						ИЛИ СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) Тогда
						
						Представление = "Оплата";
						
					ИначеЕсли СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Возврат средств";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				Представление = "Корректировка прихода";
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Представление = "Корректировка продажи";
			ИначеЕсли СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Продажи) И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				И НЕ СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли (СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				ИЛИ СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
				И (Выборка.Кредит <> 0) Тогда
				Представление = "Приход";
			ИначеЕсли СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				ИначеЕсли (Выборка.Кредит <> 0) Тогда
					Представление = "Оплата";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 Тогда
					Представление = "Принято";
				ИначеЕсли Выборка.Дебет < 0 Тогда
					Представление = "Сторно: принято";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Передано";
				Иначе
					Представление = "Сторно: передано";
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				Если Представление = "Продажа" И ТипЗнч(Выборка.Документ) <> Тип("ДокументСсылка.ОперацияБух") Тогда
					Представление = Представление + " (" + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина) 
						+ " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Иначе
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
			ИначеЕсли (Выборка.НомерВходящегоДокумента = "" И Представление = "Оплата") Или  Найти(Представление, "разницы") > 0 Тогда
				Представление = Представление + " (" + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy")+")";
			Иначе
				Представление = Представление + " (" 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '", 
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли;					  
			
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, Новый Граница (Объект.ДатаНачала,ВидГраницы.Исключая)));
	
	Запрос.Текст = 
	?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), 
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало, 
	|	0 КАК ОстатокНаКонец", 
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало,
	|	0 КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало");
	
	Запрос.Текст = Запрос.Текст + 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В
	|							(ВЫБРАТЬ
	|								ДоговораКонтрагента.Договор
	|							ИЗ
	|								ДоговораКонтрагента)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|ИТОГИ
	|	СУММА(ОстатокНаНачало),
	|	СУММА(ОстатокНаКонец)
	|ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	Объект.ОстатокНаНачало = Выборка.ОстатокНаНачало;
	ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() 
		И НЕ Объект.ВыводитьПолныеНазванияДокументов  Тогда
		
		НаборДвижений.Свернуть("Дата,Документ,Представление,Договор,Валюта", "Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			Если СтрокаДвижений.ВалютнаяСумма >0 Тогда
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма <0 Тогда
				Множитель = ?(СтрокаДвижений.Дебет + СтрокаДвижений.Кредит>0, -1,1);
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(Множитель*СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
	
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		НаборДвижений.Свернуть("Дата,Документ,Представление,Договор","Дебет, Кредит");	
	КонецЕсли; 
	
	Если Объект.ВыводитьПолныеНазванияДокументов Тогда	
		НаборДвижений.Свернуть("Дата,Документ,Представление,Договор","Дебет, Кредит");
	КонецЕсли;

	Если Объект.РазбитьПоДоговорам Тогда
		НаборДвижений.Сортировать("Договор, Дата, Документ, Представление", Новый СравнениеЗначений);
	Иначе
		НаборДвижений.Сортировать("Дата, Документ, Представление, Договор", Новый СравнениеЗначений);
	КонецЕсли;

	Объект.ПоДаннымОрганизации.Загрузить(НаборДвижений);
	
КонецПроцедуры

Функция СчетВИерархии(Счет, Эталон) Экспорт

	Если ЗначениеЗаполнено(Счет) Тогда
		Возврат Счет = Эталон ИЛИ Счет.ПринадлежитЭлементу(Эталон);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ПолучитьМетаданныеДокумента(Знач ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли; 
	
    Возврат МетаданныеДокумента;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

Процедура ПроверитьКонтрагентаНаДублирование(ИНН, КПП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Контрагенты.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Контрагенты.Ссылка) >= 1";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ТекстИсключения = НСтр("ru = 'Контрагент с ИНН = %1 и КПП = %2 уже существует.'");
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ИНН, КПП));
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентРодитель(РодительТекст)
	
	РодительСсылка = Справочники.Контрагенты.ПустаяСсылка();
	
	МассивРодителей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РодительТекст, "/");
	Прародитель = Справочники.Контрагенты.ПустаяСсылка();
	Для Каждого РодительНаименование Из МассивРодителей Цикл
		РодительСсылка = КонтрагентНайтиРодителя(РодительНаименование, Прародитель);
		Если Не ЗначениеЗаполнено(РодительСсылка) Тогда
			РодительОбъект = Справочники.Контрагенты.СоздатьГруппу();
			РодительОбъект.Наименование = РодительНаименование;
			РодительОбъект.Родитель = Прародитель;
			РодительОбъект.Записать();
			РодительСсылка = РодительОбъект.Ссылка;
		КонецЕсли;
		
		Прародитель = РодительСсылка;
	КонецЦикла;
	
	Возврат РодительСсылка;
	
КонецФункции

Функция КонтрагентНайтиРодителя(Наименование, Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Наименование = &Наименование
	|	И Контрагенты.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция КонтактныеЛицаКонтрагента(Контрагент, ContactCollection)
	
	ОсновнойКонтакт = Неопределено;
	Для Каждого Contact Из ContactCollection.Item Цикл
		Наименование = СокрЛП(Contact.Name);
		Должность = СокрЛП(Contact.Post);
		
		КонтактноеЛицо = Справочники.КонтактныеЛица.НайтиПоНаименованию(Наименование, Истина,, Контрагент);
		
		Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Иначе
			КонтактноеЛицоОбъект = КонтактноеЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		КонтактноеЛицоОбъект.Наименование = Наименование;
		КонтактноеЛицоОбъект.Должность = Должность;
		КонтактноеЛицоОбъект.ОбъектВладелец = Контрагент;
		КонтактноеЛицоОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		КонтактноеЛицоОбъект.Записать();
		
		Если ОсновнойКонтакт = Неопределено Тогда
			ОсновнойКонтакт = КонтактноеЛицоОбъект.Ссылка;
		КонецЕсли;		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Контрагент.ОсновноеКонтактноеЛицо) Тогда
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ОсновноеКонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
		КонтрагентОбъект.Записать();
	КонецЕсли;
	
	Возврат КонтактноеЛицоОбъект.Ссылка;
	
КонецФункции

Функция БанковскиеСчетаКонтрагента(Контрагент, AccountCollection)
	
	ОсновнойБанковскийСчет = Неопределено;
	
	Для Каждого Account Из AccountCollection.Item Цикл
		БИК = Account.RCBIC;
		НаименованиеБанка = Account.Bank;
		КоррСчет = Account.CorrAcc;
		Счет = Account.CurrentAcc;
		
		Банк = Справочники.Банки.НайтиПоКоду(БИК);
		
		Если Не ЗначениеЗаполнено(Банк) Тогда
			БанкОбъект = Справочники.Банки.СоздатьЭлемент();
			БанкОбъект.Код = БИК;
			БанкОбъект.Наименование = НаименованиеБанка;
			БанкОбъект.КоррСчет = КоррСчет;
			БанкОбъект.Записать();
			Банк = БанкОбъект.Ссылка;	
		КонецЕсли;
		
		БанковскийСчет = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", Счет,, Контрагент);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		Иначе
			БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект();
		КонецЕсли;
		
		БанковскийСчетОбъект.НомерСчета = Счет;
		БанковскийСчетОбъект.Банк = Банк;
		БанковскийСчетОбъект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
		БанковскийСчетОбъект.ВидСчета = "Расчетный";
		
		БанковскийСчетОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, %2", Счет, Банк);
		БанковскийСчетОбъект.Владелец = Контрагент;
		БанковскийСчетОбъект.Записать();
		
		Если ОсновнойБанковскийСчет = Неопределено Тогда
			ОсновнойБанковскийСчет = БанковскийСчетОбъект.Ссылка;
		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ОсновнойБанковскийСчет = БанковскийСчетОбъект.Ссылка;
		КонтрагентОбъект.Записать();
	КонецЕсли;
	
	Возврат БанковскийСчетОбъект.Ссылка;	
	
КонецФункции

Функция ПолучитьДанныеКонтрагента(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЮрАдрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ФактАдрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПочтовыйАдрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	ЕСТЬNULL(ПочтовыйАдрес.Представление, """") КАК ПочтовыйАдрес,
	|	ЕСТЬNULL(ФактАдрес.Представление, """") КАК ФактическийАдрес,
	|	ЕСТЬNULL(ЮрАдрес.Представление, """") КАК ЮридическийАдрес,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное,
	|	Контрагенты.Родитель,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Комментарий
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЮрАдрес КАК ЮрАдрес
	|		ПО (ЮрАдрес.Ссылка = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактАдрес КАК ФактАдрес
	|		ПО (ФактАдрес.Ссылка = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПочтовыйАдрес КАК ПочтовыйАдрес
	|		ПО (ПочтовыйАдрес.Ссылка = Контрагенты.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КоррСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БанкБИК
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛица.Наименование,
	|	КонтактныеЛица.Должность
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[3].Выбрать(); // Контрагенты
	Выборка.Следующий();
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ID"           , Выборка.Ссылка.УникальныйИдентификатор());
	ДанныеКонтрагента.Вставить("INN"          , СокрЛП(Выборка.ИНН));
	ДанныеКонтрагента.Вставить("KPP"          , СокрЛП(Выборка.КПП));
	ДанныеКонтрагента.Вставить("Name"         , СокрЛП(Выборка.Наименование));
	ДанныеКонтрагента.Вставить("FullName"     , СокрЛП(Выборка.НаименованиеПолное));
	ДанныеКонтрагента.Вставить("Parent"       , ?(НЕ ЗначениеЗаполнено(Выборка.Родитель), "", Выборка.Родитель.ПолноеНаименование()));
	ДанныеКонтрагента.Вставить("Contact"      , Новый Массив);
	ДанныеКонтрагента.Вставить("LegalAddress" , СокрЛП(Выборка.ЮридическийАдрес));
	ДанныеКонтрагента.Вставить("ActualAddress", СокрЛП(Выборка.ФактическийАдрес));
	ДанныеКонтрагента.Вставить("PostalAddress", СокрЛП(Выборка.ПочтовыйАдрес));
	ДанныеКонтрагента.Вставить("Account"      , Новый Массив);
	ДанныеКонтрагента.Вставить("DeletionMark" , Выборка.ПометкаУдаления);
	ДанныеКонтрагента.Вставить("Comment" , Выборка.Комментарий);
	
	Выборка = Результат[4].Выбрать(); // Банковские счета
	
	Пока Выборка.Следующий() Цикл
		ДанныеСчета = Новый Структура("CurrentAcc,CorrAcc,Bank,RCBIC", Выборка.НомерСчета, Выборка.КоррСчет, Выборка.Банк, Выборка.БанкБИК);
		ДанныеКонтрагента.Account.Добавить(ДанныеСчета);
	КонецЦикла;
	
	
	Выборка = Результат[5].Выбрать(); // Контактные лица	
	
	Пока Выборка.Следующий() Цикл
		ДанныеКонтрагента.Contact.Добавить(Новый Структура("Name,Post", Выборка.Наименование, Выборка.Должность));
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;

КонецФункции

Процедура ЗаполнитьКонтрагентОбъект(КонтрагентОбъект, Contractor)
	
	ИНН = Contractor.INN;
	КПП = Contractor.KPP;
	
	КонтрагентОбъект.Наименование = СокрЛП(Contractor.Name);
	КонтрагентОбъект.НаименованиеПолное = СокрЛП(Contractor.FullName);
	КонтрагентОбъект.ИНН = ИНН;
	КонтрагентОбъект.КПП = КПП;
	КонтрагентОбъект.Наименование = Contractor.Name;
	КонтрагентОбъект.ЮридическоеФизическоеЛицо = 
	?(СтрДлина(ИНН) = 10, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	КонтрагентОбъект.Родитель = КонтрагентРодитель(Contractor.Parent);
	
	ЮридическийАдрес = Contractor.LegalAddress.Presentation;
	ФактическийАдрес = Contractor.ActualAddress.Presentation;
	ПочтовыйАдрес = Contractor.PostalAddress.Presentation;
	
	КонтрагентОбъект.КонтактнаяИнформация.Очистить();
	Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
		НоваяСтрока = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		НоваяСтрока.Представление = ЮридическийАдрес;
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
			НоваяСтрока.Представление, НоваяСтрока.Вид);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФактическийАдрес) Тогда
		НоваяСтрока = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		НоваяСтрока.Представление = ФактическийАдрес;
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
			НоваяСтрока.Представление, НоваяСтрока.Вид);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочтовыйАдрес) Тогда
		НоваяСтрока = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		НоваяСтрока.Представление = ПочтовыйАдрес;
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
			НоваяСтрока.Представление, НоваяСтрока.Вид);
	КонецЕсли;
		
	КонтрагентОбъект.Комментарий = Contractor.Comment;	
		
	КонтрагентОбъект.Записать();
	
	Руководитель = КонтактныеЛицаКонтрагента(КонтрагентОбъект.Ссылка, Contractor.Contact);
	БанковскийСчет = БанковскиеСчетаКонтрагента(КонтрагентОбъект.Ссылка, Contractor.Account);
	
КонецПроцедуры

Функция ПолучитьКонтрагентовПоИНН(ИНН, КПП)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И (НЕ &ИскатьПоКПП
	|			ИЛИ Контрагенты.КПП = &КПП)";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("ИскатьПоКПП", СтрДлина(ИНН) = 10);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область Договоры

Функция ПолучитьДанныеДоговора(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Владелец,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.Номер,
	|	ДоговорыКонтрагентов.СрокДействия,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ПометкаУдаления,
	|	ДоговорыКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДанныеДоговора = Новый Структура;
		ДанныеДоговора.Вставить("ID", Выборка.Ссылка.УникальныйИдентификатор());
		ДанныеДоговора.Вставить("ContractorID", Выборка.Владелец.УникальныйИдентификатор());
		ДанныеДоговора.Вставить("OrganizationID", Выборка.Организация.УникальныйИдентификатор());
		ДанныеДоговора.Вставить("Name", СокрЛП(Выборка.Наименование));
		ДанныеДоговора.Вставить("Number", СокрЛП(Выборка.Номер));
		ДанныеДоговора.Вставить("Date", Выборка.Дата);
		ДанныеДоговора.Вставить("EndDate", Выборка.СрокДействия);
		ДанныеДоговора.Вставить("Type", XMLСтрока(Выборка.ВидДоговора));
		ДанныеДоговора.Вставить("DeletionMark", Выборка.ПометкаУдаления);
		ДанныеДоговора.Вставить("Comment", Выборка.Комментарий);
		
		ДанныеДоговора.Вставить("Properties", Новый Массив);
		Для Каждого ЗначениеСвойства Из УправлениеСвойствами.ЗначенияСвойств(Выборка.Ссылка, Истина, Ложь) Цикл
			Свойство = ЗначениеСвойства.Свойство.Имя;
			Значение = ЗначениеСвойства.Значение.Наименование;
			ДанныеДоговора.Properties.Добавить(Новый Структура("Key,Value", Свойство, Значение));
		КонецЦикла;
		
		Возврат ДанныеДоговора;
		
	КонецЕсли;	

КонецФункции

Процедура ЗаполнитьДоговорОбъект(ДоговорОбъект, Contract)
	
	ДоговорОбъект.Номер = СокрЛП(Contract.Number);
	ДоговорОбъект.Дата = Contract.Date;
	ДоговорОбъект.СрокДействия = Contract.EndDate;
	
	Если ЗначениеЗаполнено(Contract.Type) Тогда
		ДоговорОбъект.ВидДоговора = XMLЗначение(Тип("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"), Contract.Type);
	Иначе
		ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Contract.Name) Тогда
		ДоговорОбъект.Наименование = СокрЛП(Contract.Name);
	КонецЕсли;
	ДоговорОбъект.Комментарий = Contract.Comment;
	
	ДоговорОбъект.Записать();
	
	СвойстваИЗначения = Новый ТаблицаЗначений;
	СвойстваИЗначения.Колонки.Добавить("Свойство");
	СвойстваИЗначения.Колонки.Добавить("Значение");
	Для Каждого Property Из Contract.Properties Цикл
		НоваяСтрока = СвойстваИЗначения.Добавить();
		НоваяСтрока.Свойство = НайтиСвойствоПоИмени(Property.Key, "Справочник_ДоговорыКонтрагентов");
		НоваяСтрока.Значение = НайтиЗначениеСвойства(НоваяСтрока.Свойство, Property.Value);
	КонецЦикла;
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДоговорОбъект.Ссылка, СвойстваИЗначения);
	
КонецПроцедуры

Функция ПолучитьДоговораКонтрагента(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	
КонецФункции

#КонецОбласти

#Область Сверка

Функция ПолучитьДанныеСверки(НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	// TODO:
	//ЗаполнитьЗначенияСвойств(Reconciliation, СтрокаТаблицы,, "ContractorID,ContractID,Payd,Accrued");
	
КонецФункции
	
#КонецОбласти

#Область ПлатежиПоСчетам

Функция ПолучитьПлатежиПоСчетам(НачалоПериода, КонецПериода)
	
	ПлатежиПоСчетам = Новый ТаблицаЗначений;
	ПлатежиПоСчетам.Колонки.Добавить("Счет");
	ПлатежиПоСчетам.Колонки.Добавить("Номер");
	ПлатежиПоСчетам.Колонки.Добавить("Дата");
	ПлатежиПоСчетам.Колонки.Добавить("Контрагент");
	ПлатежиПоСчетам.Колонки.Добавить("КонтрагентНаименование");
	ПлатежиПоСчетам.Колонки.Добавить("Договор");
	ПлатежиПоСчетам.Колонки.Добавить("Услуги");
	ПлатежиПоСчетам.Колонки.Добавить("Сумма");
	ПлатежиПоСчетам.Колонки.Добавить("Оплачено");
	ПлатежиПоСчетам.Колонки.Добавить("АктИСчетФактура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Ссылка КАК СчетНаОплату,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СчетНаОплатуПокупателюТовары.Количество КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Номер КАК Номер,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Дата КАК Дата,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Контрагент КАК Контрагент,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	СчетНаОплатуПокупателюТовары.Ссылка.ДоговорКонтрагента КАК Договор,
	|	СчетНаОплатуПокупателюТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплатуПокупателюТовары.Содержание
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	НЕ СчетНаОплатуПокупателюТовары.Ссылка В
	|				(ВЫБРАТЬ
	|					СтатусыДокументов.Документ
	|				ИЗ
	|					РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|				ГДЕ
	|					СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.Отменен))
	|	И НЕ СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления
	|	И СчетНаОплатуПокупателюТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|ИТОГИ
	|	СУММА(СуммаДокумента)
	|ПО
	|	СчетНаОплату";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	ВыборкаСчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		НоваяСтрока = ПлатежиПоСчетам.Добавить();
		НоваяСтрока.Счет = ВыборкаСчет.СчетНаОплату;
		НоваяСтрока.Номер = ВыборкаСчет.Номер;
		НоваяСтрока.Дата = ВыборкаСчет.Дата;
		НоваяСтрока.Контрагент = ВыборкаСчет.Контрагент;
		НоваяСтрока.КонтрагентНаименование = ВыборкаСчет.КонтрагентНаименование;
		НоваяСтрока.Договор = ВыборкаСчет.Договор;
		НоваяСтрока.Сумма = ВыборкаСчет.СуммаДокумента;
		НоваяСтрока.Оплачено = 0;
		
		НоваяСтрока.Услуги = КонструкторТаблицаУслуги();
		НоваяСтрока.АктИСчетФактура = Новый Массив;
		
		ВыборкаУслуги = ВыборкаСчет.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			НоваяУслуга = НоваяСтрока.Услуги.Добавить();
			НоваяУслуга.Содержание = ВыборкаУслуги.Содержание;
			НоваяУслуга.Номенклатура = ВыборкаУслуги.Номенклатура;
			НоваяУслуга.НоменклатурнаяГруппа = ВыборкаУслуги.НоменклатурнаяГруппа;
			НоваяУслуга.СтавкаНДС = ВыборкаУслуги.СтавкаНДС;
			НоваяУслуга.Количество = ВыборкаУслуги.Количество;
			НоваяУслуга.Сумма = ВыборкаУслуги.Сумма;
		КонецЦикла;		
	КонецЦикла;
	
	СчетаОтбор = ПлатежиПоСчетам.ВыгрузитьКолонку("Счет");
	
	ПлатежиПоСчетам.Индексы.Добавить("Счет");
	
	// Платежи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа) КАК СуммаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Проведен
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату В(&СчетаНаОплату)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату,
	|	СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату В(&СчетаНаОплату)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату";
	Запрос.УстановитьПараметр("СчетаНаОплату", СчетаОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденнаяСтрока = ПлатежиПоСчетам.Найти(Выборка.СчетНаОплату, "Счет");
		НайденнаяСтрока.Оплачено = Выборка.СуммаПлатежа;
	КонецЦикла;
	
	// Акты и счет-фактуры
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплату
	|ПОМЕСТИТЬ Акты
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.СчетНаОплатуПокупателю В(&Счета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Акты.СчетНаОплату КАК Счет,
	|	Акты.Ссылка КАК Акт,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	Акты КАК Акты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = Акты.Ссылка)
	|ИТОГИ ПО
	|	Счет";
	Запрос.УстановитьПараметр("Счета", ПлатежиПоСчетам.ВыгрузитьКолонку("Счет"));
	
	ВыборкаСчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		НайденнаяСтрока = ПлатежиПоСчетам.Найти(ВыборкаСчет.Счет, "Счет");
		
		АктИСчетФактура = Новый Массив;
		Выборка = ВыборкаСчет.Выбрать();
		Пока Выборка.Следующий() Цикл
			АктИСчетФактура.Добавить(Новый Структура("Акт, СчетФактура", Выборка.Акт, Выборка.СчетФактура));
		КонецЦикла;
		
		НайденнаяСтрока.АктИСчетФактура = АктИСчетФактура;
	КонецЦикла;
	
	
	Возврат ПлатежиПоСчетам;	
	
КонецФункции

Функция КонструкторТаблицаУслуги()
	
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Номенклатура");
	ТаблицаУслуги.Колонки.Добавить("Содержание");
	ТаблицаУслуги.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаУслуги.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуги.Колонки.Добавить("Сумма");
	ТаблицаУслуги.Колонки.Добавить("Количество");
	
	Возврат ТаблицаУслуги;
	
КонецФункции

#КонецОбласти

Функция НайтиСвойствоПоИмени(ИмяСвойства, ИмяОбъекта)
	
	Набор = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяОбъекта];
	Если Не ЗначениеЗаполнено(Набор) Тогда
		ВызватьИсключение(СтрШаблон("Не найден набор дополнительных реквизитов для объекта %1", ИмяОбъекта));
	КонецЕсли;
	
	Свойство = Неопределено;
	Для Каждого СтрокаТаблицы Из Набор.ДополнительныеРеквизиты Цикл
		Если СтрокаТаблицы.Свойство.Имя = ИмяСвойства И НЕ СтрокаТаблицы.ПометкаУдаления Тогда
			Свойство = СтрокаТаблицы.Свойство;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ВызватьИсключение(СтрШаблон("Не найдено свойство <%1>", ИмяСвойства));
	КонецЕсли;
	
	Возврат Свойство;
	
КонецФункции

Функция НайтиЗначениеСвойства(Свойство, Значение)
	
	ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Значение, Истина,, Свойство);
	//Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	//	ВызватьИсключение(СтрШаблон("Значение <%1> для свойства <%2> не найдено", Значение, Свойство));
	//КонецЕсли;
	//
	Возврат ЗначениеСвойства;
	
КонецФункции

#КонецОбласти
